akka {
  log-dead-letters-during-shutdown = off
  log-dead-letters = 0

  #stdout-loglevel = "OFF"
  loglevel = "INFO"

  coordinated-shutdown.exit-jvm = on
  coordinated-shutdown.run-by-jvm-shutdown-hook=off

  actor {
    provider = "cluster"
    serialize-messages = off
    warn-about-java-serializer-usage = off
  }

  remote {

    maximum-payload-bytes = 30000000 bytes

    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0

      message-frame-size =  300000000b
      send-buffer-size =  300000000b
      receive-buffer-size =  300000000b
      maximum-frame-size = 300000000b
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://factdb@127.0.0.1:2551",
      "akka.tcp://factdb@127.0.0.1:2552"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    # auto-down-unreachable-after = 10s
  }
}

//#my-dispatcher-config
my-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}
//#my-dispatcher-config

# Enable metrics extension in akka-cluster-metrics.
#akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
akka.extensions=["akka.cluster.pubsub.DistributedPubSub", "akka.cluster.client.ClusterClientReceptionist"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native

# Settings for the ClusterClientReceptionist extension
akka.cluster.client.receptionist {
  # Actor name of the ClusterReceptionist actor, /system/receptionist
  name = receptionist

  # Start the receptionist on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""

  # The receptionist will send this number of contact points to the client
  number-of-contacts = 3

  # The actor that tunnel response messages to the client will be stopped
  # after this time of inactivity.
  response-tunnel-receive-timeout = 1000s

  # The id of the dispatcher to use for ClusterReceptionist actors.
  # If not specified default dispatcher is used.
  # If specified you need to define the settings of the actual dispatcher.
  use-dispatcher = "my-dispatcher"

  # How often failure detection heartbeat messages should be received for
  # each ClusterClient
  heartbeat-interval = 2s

  # Number of potentially lost/delayed heartbeats that will be
  # accepted before considering it to be an anomaly.
  # The ClusterReceptionist is using the akka.remote.DeadlineFailureDetector, which
  # will trigger if there are no heartbeats within the duration
  # heartbeat-interval + acceptable-heartbeat-pause, i.e. 15 seconds with
  # the default settings.
  acceptable-heartbeat-pause = 1000s

  # Failure detection checking interval for checking all ClusterClients
  failure-detection-interval = 2s
}